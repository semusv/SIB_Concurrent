package sync;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

/**
 * –ö–ª–∞—Å—Å, –º–æ–¥–µ–ª–∏—Ä—É—é—â–∏–π —Ä–∞–±–æ—Ç—É –ø–∞—Ä–∫–æ–≤–∫–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–µ—Å—Ç
 * —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Semaphore –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞
 */
public class ParkingLot {

    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç
    private static final int PARKING_CAPACITY = 5;
    private static final int WAIT_GENERIC_MS = 1000;

    /**
     * –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã–º –º–µ—Å—Ç–∞–º.
     * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Ä–∞–≤–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç.
     * –ü–∞—Ä–∞–º–µ—Ç—Ä fair = true –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–π —Ä–µ–∂–∏–º (FIFO)
     */
    private static final Semaphore parkingSpots = new Semaphore(PARKING_CAPACITY, true);

    /**
     * –§–ª–∞–≥ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞–±–æ—Ç—ã –ø–æ—Ç–æ–∫–æ–≤.
     * volatile –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–µ–∂–¥—É –ø–æ—Ç–æ–∫–∞–º–∏
     */
    private static volatile boolean isRunning = true;

    /**
     * –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤-–º–∞—à–∏–Ω
     */
    private static final List<Thread> carThreads = new ArrayList<>();

    public static void main(String[] args) {
        System.out.println("–ü–∞—Ä–∫–æ–≤–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞! –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: " + parkingSpots.availablePermits());

        /**
         * –î–æ–±–∞–≤–ª—è–µ–º shutdown hook –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.
         * –≠—Ç–æ—Ç –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã JVM
         * (Ctrl+C –≤ –∫–æ–Ω—Å–æ–ª–∏ –∏–ª–∏ System.exit())
         */
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            isRunning = false; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            System.out.println("\n–ü–∞—Ä–∫–æ–≤–∫–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è... –ñ–¥–µ–º –ø–æ–∫–∞ –≤—Å–µ –º–∞—à–∏–Ω—ã —É–µ–¥—É—Ç");

            // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
            waitForAllCarsToLeave();
        }));

        // –ó–∞–ø—É—Å–∫–∞–µ–º 10 –º–∞—à–∏–Ω (–∫–∞–∂–¥–∞—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
        for (int i = 1; i <= 10; i++) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            if (!isRunning) {
                System.out.println("–ù–æ–≤—ã–µ –º–∞—à–∏–Ω—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è - –ø–∞—Ä–∫–æ–≤–∫–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è");
                break;
            }

            // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –º–∞—à–∏–Ω—É
            Thread car = new Thread(new Car("–ú–∞—à–∏–Ω–∞-" + i));
            carThreads.add(car); // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ç–æ–∫ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            car.start();

            try {
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–æ–º –º–∞—à–∏–Ω –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
                Thread.sleep(new Random().nextInt(WAIT_GENERIC_MS));
            } catch (InterruptedException e) {
                System.out.println("–ì–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω");
                Thread.currentThread().interrupt(); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
                break;
            }
        }

        // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –∏–∑ main
        waitForAllCarsToLeave();
        System.out.println("–í—Å–µ –º–∞—à–∏–Ω—ã —É–µ—Ö–∞–ª–∏. –ü–∞—Ä–∫–æ–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞.");
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤-–º–∞—à–∏–Ω
     */
    private static void waitForAllCarsToLeave() {
        // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        for (Thread carThread : carThreads) {
            try {
                // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º 3 —Å–µ–∫—É–Ω–¥—ã
                carThread.join(3000);
                if (carThread.isAlive()) {
                    System.out.println("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø–æ—Ç–æ–∫ " + carThread.getName() + " –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –≤–æ–≤—Ä–µ–º—è");
                }
            } catch (InterruptedException e) {
                System.out.println("–ü—Ä–µ—Ä–≤–∞–Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ " + carThread.getName());
                Thread.currentThread().interrupt();
            }
        }
    }

    /**
     * –ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –º–∞—à–∏–Ω—É –Ω–∞ –ø–∞—Ä–∫–æ–≤–∫–µ
     */
    static class Car implements Runnable {
        private final String name; // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∞—à–∏–Ω—ã

        public Car(String name) {
            this.name = name;
        }

        @Override
        public void run() {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ —Ä–∞–±–æ—Ç—ã –≤ —Ü–∏–∫–ª–µ (—Ö–æ—Ç—è –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)
                while (isRunning) {
                    System.out.println(name + " –ø–æ–¥—ä–µ—Ö–∞–ª–∞ –∫ –ø–∞—Ä–∫–æ–≤–∫–µ.");

                    /**
                     * –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–Ω—è—Ç—å –ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ —Å —Ç–∞–π–º–∞—É—Ç–æ–º 2 —Å–µ–∫—É–Ω–¥—ã.
                     * tryAcquire –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                     */
                    if (parkingSpots.tryAcquire(2, TimeUnit.SECONDS)) {
                        try {
                            // –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–∞—Ä–∫–æ–≤–∫–µ
                            System.out.println("‚úÖ " + name + " –ø—Ä–∏–ø–∞—Ä–∫–æ–≤–∞–ª–∞—Å—å! –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: " +
                                    (parkingSpots.availablePermits()));

                            /**
                             * –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å—Ç–æ—è–Ω–∫–∏ (—Å–ª—É—á–∞–π–Ω–æ–µ –æ—Ç 1 –¥–æ 10 —Å–µ–∫—É–Ω–¥)
                             * –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–∞–±–æ—Ç–∞ —Å —Ä–µ—Å—É—Ä—Å–æ–º
                             */
                            Thread.sleep((long) (Math.random() * 10000 + 1000));

                            // –°–æ–æ–±—â–∞–µ–º –æ–± –æ—Ç—ä–µ–∑–¥–µ
                            System.out.println("üöó " + name + " —É–µ—Ö–∞–ª–∞. –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: " +
                                    (PARKING_CAPACITY - parkingSpots.availablePermits()));

                            return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–∞—Ä–∫–æ–≤–∫–∏
                        } finally {
                            /**
                             * –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º–µ—Å—Ç–æ –≤ –±–ª–æ–∫–µ finally.
                             * –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤,
                             * –¥–∞–∂–µ –µ—Å–ª–∏ –≤ try –±–ª–æ–∫–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                             */
                            parkingSpots.release();
                        }
                    } else {
                        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ –∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã
                        System.out.println("‚ùå " + name + " –Ω–µ –¥–æ–∂–¥–∞–ª–∞—Å—å –º–µ—Å—Ç–∞ –∏ —É–µ—Ö–∞–ª–∞.");
                        return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫
                    }
                }
            } catch (InterruptedException e) {
                /**
                 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞.
                 * –í–∞–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                 */
                System.out.println(name + " –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –≤–æ –≤—Ä–µ–º—è –ø–∞—Ä–∫–æ–≤–∫–∏");
                Thread.currentThread().interrupt();
            }
        }
    }
}