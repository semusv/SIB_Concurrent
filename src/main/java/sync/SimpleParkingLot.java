package sync;

import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

import lombok.extern.slf4j.Slf4j;

/**
 * –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Semaphore –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ—Å—É—Ä—Å—É.
 * –ú–æ–¥–µ–ª–∏—Ä—É–µ—Ç –ø–∞—Ä–∫–æ–≤–∫—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–µ—Å—Ç.
 */
@Slf4j
public class SimpleParkingLot {

    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç
    private static final int PARKING_CAPACITY = 3;

    // –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∫ –º–µ—Å—Ç–∞–º // FAIR
    private static final Semaphore parkingSpots = new Semaphore(PARKING_CAPACITY, true);

    public static void main(String[] args) {
        log.info("–ü–∞—Ä–∫–æ–≤–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞! –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: {}", parkingSpots.availablePermits());

        // –ó–∞–ø—É—Å–∫–∞–µ–º 5 –º–∞—à–∏–Ω
        for (int i = 1; i <= 5; i++) {
            new Thread(new Car("–ú–∞—à–∏–Ω–∞-" + i)).start();
        }
    }

    /**
     * –ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –º–∞—à–∏–Ω—É –Ω–∞ –ø–∞—Ä–∫–æ–≤–∫–µ.
     */
    static class Car implements Runnable {
        private final String name;

        Car(String name) {
            this.name = name;
        }

        @Override
        public void run() {
            try {
                log.info("{} –ø–æ–¥—ä–µ—Ö–∞–ª–∞ –∫ –ø–∞—Ä–∫–æ–≤–∫–µ.", name);

                // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–Ω—è—Ç—å –º–µ—Å—Ç–æ —Å —Ç–∞–π–º–∞—É—Ç–æ–º 2 —Å–µ–∫—É–Ω–¥—ã
                if (parkingSpots.tryAcquire(2, TimeUnit.SECONDS)) {
                    try {
                        log.info("‚úÖ {} –ø—Ä–∏–ø–∞—Ä–∫–æ–≤–∞–ª–∞—Å—å! –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: {}", name, parkingSpots.availablePermits());

                        // –ò–º–∏—Ç–∞—Ü–∏—è —Å—Ç–æ—è–Ω–∫–∏
                        Thread.sleep((long) (Math.random() * 3000 + 1000));
                    } finally {
                        parkingSpots.release(); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º–µ—Å—Ç–æ
                    }
                    log.info("üöó {} —É–µ—Ö–∞–ª–∞. –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: {}", name, parkingSpots.availablePermits());
                } else {
                    log.info("‚ùå {} –Ω–µ –¥–æ–∂–¥–∞–ª–∞—Å—å –º–µ—Å—Ç–∞ –∏ —É–µ—Ö–∞–ª–∞.", name);
                }
            } catch (InterruptedException e) {
                log.warn("{} –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –≤–æ –≤—Ä–µ–º—è –ø–∞—Ä–∫–æ–≤–∫–∏", name);
                Thread.currentThread().interrupt();
            }
        }
    }
}
